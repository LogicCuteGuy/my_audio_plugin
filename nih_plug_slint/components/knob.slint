import { VerticalBox } from "std-widgets.slint";
import { PluginParameter } from "parameter.slint";

export component ParameterKnob inherits Rectangle {
    in-out property <PluginParameter> parameter;
    in-out property <angle> min-angle: -250deg;
    in-out property <angle> max-angle:   70deg;
    in-out property <float> sensitivity: 0.25;

    property <bool> changing;

    callback start-change();
    callback changed(float);
    callback end-change();
    callback set-string(string);

    horizontal-stretch: 0;
    vertical-stretch: 0;

    function start-editing() {
        edit-field.visible = true;
        edit-text-field.text = root.parameter.display-value;
        edit-text-field.focus();
        edit-text-field.select-all();
    }

    layout := VerticalLayout {
        // Knob area
        knob := Rectangle {
            height: 100px;
            width: 100px;

            // Background arc
            Path {
                viewbox-x: -50;
                viewbox-y: -50;
                viewbox-width: 100;
                viewbox-height: 100;
                stroke: #aaa;
                stroke-width: 10px;

                MoveTo {
                    x: Math.cos(root.min-angle) * 50;
                    y: Math.sin(root.min-angle) * 50;
                }

                ArcTo {
                    radius-x: 50;
                    radius-y: 50;
                    x: Math.cos(root.max-angle) * 50;
                    y: Math.sin(root.max-angle) * 50;
                    large-arc: true;
                    sweep: true;
                }
            }

            // Value arc
            if (root.max-angle - root.min-angle) * root.parameter.value <= 180deg: Path {
                viewbox-x: -50;
                viewbox-y: -50;
                viewbox-width: 100;
                viewbox-height: 100;
                stroke: touch.pressed ? #f8f: touch.has-hover ? #66f : #0000ff;
                stroke-width: 6px;

                MoveTo {
                    x: Math.cos(root.min-angle) * 48;
                    y: Math.sin(root.min-angle) * 48;
                }

                ArcTo {
                    radius-x: 48;
                    radius-y: 48;
                    x: Math.cos(root.min-angle + (root.max-angle - root.min-angle) * root.parameter.value) * 48;
                    y: Math.sin(root.min-angle + (root.max-angle - root.min-angle) * root.parameter.value) * 48;
                    sweep: true;
                }
            }

            if (root.max-angle - root.min-angle) * root.parameter.value > 180deg: Path {
                viewbox-x: -50;
                viewbox-y: -50;
                viewbox-width: 100;
                viewbox-height: 100;
                stroke: touch.pressed ? #f8f: touch.has-hover ? #66f : #0000ff;
                stroke-width: 6px;

                MoveTo {
                    x: Math.cos(root.min-angle) * 48;
                    y: Math.sin(root.min-angle) * 48;
                }

                ArcTo {
                    radius-x: 48;
                    radius-y: 48;
                    x: Math.cos(root.min-angle + (root.max-angle - root.min-angle) * root.parameter.value) * 48;
                    y: Math.sin(root.min-angle + (root.max-angle - root.min-angle) * root.parameter.value) * 48;
                    large-arc: true;
                    sweep: true;
                }    
            }

            // Modulation arc
            if (root.max-angle - root.min-angle) * (root.parameter.modulated-value - root.parameter.value) <= 180deg: Path {
                viewbox-x: -50;
                viewbox-y: -50;
                viewbox-width: 100;
                viewbox-height: 100;
                stroke: white.transparentize(50%);
                stroke-width: 6px;

                MoveTo {
                    x: Math.cos(root.min-angle + (root.max-angle - root.min-angle) * root.parameter.value) * 48;
                    y: Math.sin(root.min-angle + (root.max-angle - root.min-angle) * root.parameter.value) * 48;
                }

                ArcTo {
                    radius-x: 48;
                    radius-y: 48;
                    x: Math.cos(root.min-angle + (root.max-angle - root.min-angle) * root.parameter.modulated-value) * 48;
                    y: Math.sin(root.min-angle + (root.max-angle - root.min-angle) * root.parameter.modulated-value) * 48;
                    sweep: root.parameter.modulated-value > root.parameter.value;
                }
            }

            if (root.max-angle - root.min-angle) * (root.parameter.modulated-value - root.parameter.value) > 180deg: Path {
                viewbox-x: -50;
                viewbox-y: -50;
                viewbox-width: 100;
                viewbox-height: 100;
                stroke: white.transparentize(50%);
                stroke-width: 6px;

                MoveTo {
                    x: Math.cos(root.min-angle + (root.max-angle - root.min-angle) * root.parameter.value) * 48;
                    y: Math.sin(root.min-angle + (root.max-angle - root.min-angle) * root.parameter.value) * 48;
                }

                ArcTo {
                    radius-x: 48;
                    radius-y: 48;
                    x: Math.cos(root.min-angle + (root.max-angle - root.min-angle) * root.parameter.modulated-value) * 48;
                    y: Math.sin(root.min-angle + (root.max-angle - root.min-angle) * root.parameter.modulated-value) * 48;
                    large-arc: true;
                    sweep: root.parameter.modulated-value > root.parameter.value;
                }    
            }

            touch := TouchArea {
                property <float> pressed-value;
                property <duration> last-click-time;
        
                pointer-event(event) => {
                    if (event.button == PointerEventButton.left) {
                        if (event.kind == PointerEventKind.down) {
                            self.pressed-value = root.parameter.value;
                            root.start-change();
                            root.changing = true;
        
                            // Double click sets to default
                            // TODO: Don't hardcode duration
                            if (animation-tick() - last-click-time < 500ms) {
                                root.changed(root.parameter.default-value);
                            }
                            self.last-click-time = animation-tick();
        
                            if (event.modifiers.control || event.modifiers.meta) {
                                start-editing();
                            }
                        } else if (event.kind == PointerEventKind.up || event.kind == PointerEventKind.cancel) {
                            root.end-change();
                            root.changing = false;
                        }
                    }
        
                    if (root.changing && event.kind == PointerEventKind.cancel) {
                        root.end-change();
                        root.changing = false;
                    }
                }
                moved => {
                    if (self.enabled && self.pressed) {
                        root.changed(max(0.0, min(1.0, self.pressed-value + (touch.pressed-y - touch.mouse-y) / root.height * root.sensitivity)));
                    }
                }
            }
        }

        value-field := Rectangle {
            width: 60px;
            height: 20px;
            x: root.width / 2 - self.width / 2;
            background: white.transparentize(25%);
            border-radius: 5px;
    
            Text {
                text: root.parameter.display-value;
                font-size: 15px;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
    
            TouchArea {
                clicked => { start-editing(); }
            }
    
            edit-field := Rectangle {
                background: white;
                border-radius: 5px;
                visible: false;
    
                edit-text-field := TextInput {
                    font-size: 15px;
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    single-line: true;
    
                    accepted() => {
                        edit-field.visible = false;
                        root.set-string(self.text);
                    }
                }
            } 
        }
    }
}
