import { VerticalBox } from "std-widgets.slint";
import { PluginParameter } from "parameter.slint";

export component ParameterSlider inherits Rectangle {
    in-out property<PluginParameter> parameter;

    property <bool> changing;

    callback start-change();
    callback changed(float);
    callback end-change();
    callback set-string(string);

    min-height: 24px;
    min-width: 100px;
    horizontal-stretch: 1;
    vertical-stretch: 0;

    border-radius: root.height/2;
    background: touch.pressed ? #eee: #ddd;
    border-width: 1px;
    border-color: root.background.darker(25%);

    function start-editing() {
        edit-field.visible = true;
        edit-text-field.text = root.parameter.display-value;
        edit-text-field.focus();
        edit-text-field.select-all();
    }

    modulation := Rectangle {
        width: self.height;
        height: parent.height;
        border-radius: self.height / 2;
        background: handle.background.with-alpha(25%);
        border-color: self.background.darker(15%);
        x: (root.width - self.width) * (root.parameter.value + root.parameter.modulation);
    }

    handle := Rectangle {
        width: self.height;
        height: parent.height;
        border-width: 3px;
        border-radius: self.height / 2;
        background: touch.pressed ? #f8f: touch.has-hover ? #66f : #0000ff;
        border-color: self.background.darker(15%);
        x: (root.width - self.width) * root.parameter.value;
    }

    value-field := Rectangle {
        width: 60px;
        height: 20px;
        x: handle.x + handle.width / 2 - self.width / 2;
        y: handle.y + handle.height + 10px;
        background: white.transparentize(25%);
        border-radius: 5px;

        Text {
            text: root.parameter.display-value;
            font-size: 15px;
            horizontal-alignment: center;
            vertical-alignment: center;
        }

        TouchArea {
            clicked => { start-editing(); }
        }

        edit-field := Rectangle {
            background: white;
            border-radius: 5px;
            visible: false;

            edit-text-field := TextInput {
                font-size: 15px;
                horizontal-alignment: center;
                vertical-alignment: center;
                single-line: true;

                accepted() => {
                    edit-field.visible = false;
                    root.set-string(self.text);
                }
            }
        } 
    }

    touch := TouchArea {
        property <float> pressed-value;
        property <duration> last-click-time;

        pointer-event(event) => {
            if (event.button == PointerEventButton.left) {
                if (event.kind == PointerEventKind.down) {
                    self.pressed-value = root.parameter.value;
                    root.start-change();
                    root.changing = true;

                    // Double click sets to default
                    // TODO: Don't hardcode duration
                    if (animation-tick() - last-click-time < 500ms) {
                        root.changed(root.parameter.default-value);
                    }
                    self.last-click-time = animation-tick();

                    if (event.modifiers.control || event.modifiers.meta) {
                        start-editing();
                    }
                } else if (event.kind == PointerEventKind.up || event.kind == PointerEventKind.cancel) {
                    root.end-change();
                    root.changing = false;
                }
            }

            if (root.changing && event.kind == PointerEventKind.cancel) {
                root.end-change();
                root.changing = false;
            }
        }
        moved => {
            if (self.enabled && self.pressed) {
                root.changed(max(0.0, min(1.0, self.pressed-value + (touch.mouse-x - touch.pressed-x) / (root.width - handle.width))));
            }
        }
    }
}
