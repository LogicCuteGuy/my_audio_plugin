import { VerticalBox } from "std-widgets.slint";
import { PluginParameter } from "parameter.slint";

export component ParameterSlider inherits Rectangle {
    in-out property<float> maximum: 1.0;
    in-out property<float> minimum: 0.0;
    in-out property<PluginParameter> parameter;

    property <bool> changing;

    callback start-change();
    callback changed(float);
    callback end-change();

    min-height: 24px;
    min-width: 100px;
    horizontal-stretch: 1;
    vertical-stretch: 0;

    border-radius: root.height/2;
    background: touch.pressed ? #eee: #ddd;
    border-width: 1px;
    border-color: root.background.darker(25%);

    modulation := Rectangle {
        width: self.height;
        height: parent.height;
        border-radius: self.height / 2;
        background: handle.background.with-alpha(25%);
        border-color: self.background.darker(15%);
        x: (root.width - self.width) * (root.parameter.value + root.parameter.modulation - root.minimum) / (root.maximum - root.minimum);
    }

    handle := Rectangle {
        width: self.height;
        height: parent.height;
        border-width: 3px;
        border-radius: self.height / 2;
        background: touch.pressed ? #f8f: touch.has-hover ? #66f : #0000ff;
        border-color: self.background.darker(15%);
        x: (root.width - self.width) * (root.parameter.value - root.minimum) / (root.maximum - root.minimum);
    }

    touch := TouchArea {
        property <float> pressed-value;
        property <duration> last-click-time;

        pointer-event(event) => {
            if (event.button == PointerEventButton.left) {
                if (event.kind == PointerEventKind.down) {
                    self.pressed-value = root.parameter.value;
                    root.start-change();
                    root.changing = true;

                    // Double click sets to default
                    // TODO: Don't hardcode duration
                    if (animation-tick() - last-click-time < 500ms) {
                        root.changed(root.parameter.default-value);
                    }
                    self.last-click-time = animation-tick();
                } else if (event.kind == PointerEventKind.up || event.kind == PointerEventKind.cancel) {
                    root.end-change();
                    root.changing = false;
                }
            }

            if (root.changing && event.kind == PointerEventKind.cancel) {
                root.end-change();
                root.changing = false;
            }
        }
        moved => {
            if (self.enabled && self.pressed) {
                root.changed(max(root.minimum, min(root.maximum,
                    self.pressed-value + (touch.mouse-x - touch.pressed-x) * (root.maximum - root.minimum) / (root.width - handle.width)
                )));
            }
        }
    }
}
