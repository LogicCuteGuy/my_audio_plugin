import { PluginParameter } from "parameter.slint";
import { ParameterKnob } from "knob.slint";
import { ParameterSlider } from "slider.slint";
import { ParameterButton } from "button.slint";
import "resource/font/Fingercute-Regular.ttf";
import { VerticalBox, Button } from "std-widgets.slint";

export component PluginWindow {
    in-out property<PluginParameter> gain;
    in-out property<PluginParameter> bypass;

    in-out property<int> latency;

    callback start-change(PluginParameter);
    callback changed(PluginParameter, float);
    callback end-change(PluginParameter);
    callback set-string(PluginParameter, string);

    width: 800px;
    height: 500px;
    Rectangle {
        background: @linear-gradient(120deg, #2256ff 0%, #ff3b3b 50%, #ffbb00 100%);
        Rectangle {
            background: @linear-gradient(180deg, #ffffff00 50%, #0000006f 100%);
            // FIXME: Workaround for taking focus off TextInput by clicking outside it
            TouchArea {
                FocusScope {
                    enabled: true;
                }
            }

            VerticalLayout {
                padding: 8px;
                spacing: 7px;

                Rectangle {
                    height: 60px;
                    border-radius: 5px;
                    background: #00000061;
                    border-color: #ffffffb5;
                    border-width: 3px;
                    HorizontalLayout {
                        padding: 5px;
                        alignment: space-between;
                        HorizontalLayout {
                            spacing: 5px;
                            alignment: start;
                            ParameterButton {
                                height: 50px;
                                parameter: bypass;
                                start-change => { start-change(bypass); }
                                changed(value) => { changed(bypass, value); }
                                end-change => { end-change(bypass); }
                                set-string(string) => { set-string(bypass, string); }
                            }
                            Text {
                                text: "CoPiReMap";
                                font-size: 55px;
                                color: white;
                                font-family: "Fingercute";
                            }
                        }
                        HorizontalLayout {
                            spacing: 5px;
                            alignment: start;
                            
                        }
                    }
                }
                
                Rectangle {
                    height: 75px;
                    border-radius: 5px;
                    background: #00000061;
                    border-color: #ffffffb5;
                    border-width: 3px;
                    HorizontalLayout {
                        padding: 12px;
                        alignment: center;
                    }
                }

                Rectangle {
                    height: 324px;
                    border-radius: 5px;
                    background: #00000061;
                    border-color: #ffffffb5;
                    border-width: 3px;
                    HorizontalLayout {
                        padding: 20px;
                        spacing: 25px;
        
                        ParameterKnob {
                            height: 60px;
                            parameter: gain;
                            text: "Gain";
                            // FIXME: Callbacks need to be mapped manually
                            start-change => { start-change(gain); }
                            changed(value) => { changed(gain, value); }
                            end-change => { end-change(gain); }
                            set-string(string) => { set-string(gain, string); }
                        }

                        ParameterKnob {
                            height: 10px;
                            parameter: gain;
        
                            // FIXME: Callbacks need to be mapped manually
                            start-change => { start-change(gain); }
                            changed(value) => { changed(gain, value); }
                            end-change => { end-change(gain); }
                            set-string(string) => { set-string(gain, string); }
                        }

                        ParameterSlider {
                            height: 10px;
                            width: 100px;
                            parameter: gain;
            
                            // FIXME: Callbacks need to be mapped manually
                            start-change => { start-change(gain); }
                            changed(value) => { changed(gain, value); }
                            end-change => { end-change(gain); }
                            set-string(string) => { set-string(gain, string); }
                        }
                        
                    }
                }

            }

            
            HorizontalLayout {
                alignment: end;
                VerticalLayout {
                    alignment: end;
                    Rectangle {
                        width: 20px;
                        height: 20px;
                        Image {
                            colorize: touch.has-hover && touch.pressed ? #aaaaaa : touch.has-hover ? #e0dfdf : #ffffff;
                            source: @image-url("resource/img/resize-right.svg");
                        }
                        touch := TouchArea {

                        }
                    }
                }
            }

            VerticalLayout {
                alignment: end;
                padding-bottom: 3px;
                padding-left: 10px;
                padding-right: 20px;
                spacing: 0px;
                HorizontalLayout {
                    alignment: space-between;
                    Text {
                        text: "LogicCuteGuy";
                        font-size: 15px;
                        color: white;
                        font-family: "Fingercute";
                    }
                    Text {
                        text: "Latency: " + root.latency + "smp";
                        font-size: 15px;
                        color: white;
                        font-family: "Fingercute";
                    }
                }
                
            }
        }    
    }
}
