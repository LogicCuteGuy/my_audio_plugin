import { PluginParameter } from "parameter.slint";
import { ParameterKnob } from "knob.slint";
import { ParameterSlider } from "slider.slint";

export component PluginWindow {
    in-out property<PluginParameter> gain;

    in-out property <bool> dragging;
    in-out property <length> drag-x;
    in-out property <length> drag-y;
    
    out property <length> drop-area-x: drop-area.x;
    out property <length> drop-area-y: drop-area.y;
    out property <length> drop-area-width: drop-area.width;
    out property <length> drop-area-height: drop-area.height;

    callback start-change(PluginParameter);
    callback changed(PluginParameter, float);
    callback end-change(PluginParameter);
    callback set-string(PluginParameter, string);

    width: 800px;
    height: 600px;
    Rectangle {
        background: gold;

        // FIXME: Workaround for taking focus off TextInput by clicking outside it
        TouchArea {
            FocusScope {
                enabled: true;
            }
        }

        drop-area := Rectangle {
            background: red;
            width: 100px;
            height: 100px;

            x: 350px + sin(mod(animation-tick(), 5s) / 5s * 360deg) * 350px;
            y: 100px;

            states [
                dropping when dragging &&
                    drag-x >= self.x &&
                    drag-x <= self.x + self.width &&
                    drag-y >= self.y &&
                    drag-y <= self.y + self.height:
                {
                    background: blue;                    
                }
            ]

            TouchArea {
                mouse-cursor: pointer;
            }
        }

        HorizontalLayout {
            width: 300px;
            height: 100px;
            spacing: 25px;

            ParameterKnob {
                height: 25px;
                parameter: gain;

                // FIXME: Callbacks need to be mapped manually
                start-change => { start-change(gain); }
                changed(value) => { changed(gain, value); }
                end-change => { end-change(gain); }
                set-string(string) => { set-string(gain, string); }
            }

            VerticalLayout {
                width: 200px;
                height: 50px;
                spacing: 25px;
    
                Rectangle {
                    height: 25px;
                    background: white;
    
                    TextInput {
                        font-size: 20px;
                    }
                }
    
                ParameterSlider {
                    height: 25px;
                    parameter: gain;
    
                    // FIXME: Callbacks need to be mapped manually
                    start-change => { start-change(gain); }
                    changed(value) => { changed(gain, value); }
                    end-change => { end-change(gain); }
                    set-string(string) => { set-string(gain, string); }
                }
            }    
        }
    }
}
