import { PluginParameter } from "parameter.slint";
import { ParameterKnob } from "knob.slint";
import { ParameterSlider } from "slider.slint";
import { ParameterButtonBypass } from "button_bypass.slint";
import { ParameterButtonPiano } from "button_piano.slint";
import "resource/font/Fingercute-Regular.ttf";
import { VerticalBox, Button } from "std-widgets.slint";

export component PluginWindow {
    in-out property <PluginParameter> dry-gain;
    in-out property <PluginParameter> wet-gain;
    in-out property <PluginParameter> lhf-gain;
    in-out property <PluginParameter> bypass;
    in-out property <PluginParameter> scale-gui;

    in-out property <PluginParameter> note-c;
    in-out property <PluginParameter> note-c-sharp;
    in-out property <PluginParameter> note-d;
    in-out property <PluginParameter> note-d-sharp;
    in-out property <PluginParameter> note-e;
    in-out property <PluginParameter> note-f;
    in-out property <PluginParameter> note-f-sharp;
    in-out property <PluginParameter> note-g;
    in-out property <PluginParameter> note-g-sharp;
    in-out property <PluginParameter> note-a;
    in-out property <PluginParameter> note-a-sharp;
    in-out property <PluginParameter> note-b;
    
    in-out property <float> global-meter;
    in-out property <[float]> note-meter;

    property <bool> gui_changing;
    in property <int> latency;
    callback start-change(PluginParameter);
    callback changed(PluginParameter, float);
    callback end-change(PluginParameter);
    callback set-string(PluginParameter, string);
    width: 800px;
    height: 500px;
    
    Rectangle {
        background: @linear-gradient(120deg, #2256ff 0%, #ff3b3b 50%, #ffbb00 100%);
        Rectangle {
            background: @linear-gradient(180deg, #ffffff00 50%, #0000006f 100%);
            // FIXME: Workaround for taking focus off TextInput by clicking outside it
            TouchArea {
                FocusScope {
                    enabled: true;
                }
            }
            Text {
                text: "This is " + global-meter;
            }
            VerticalLayout {
                padding: 8px;
                spacing: 7px;
                Rectangle {
                    height: 60px;
                    border-radius: 5px;
                    background: #00000061;
                    border-color: #ffffffb5;
                    border-width: 3px;
                    HorizontalLayout {
                        padding: 5px;
                        alignment: space-between;
                        HorizontalLayout {
                            spacing: 5px;
                            alignment: start;
                            ParameterButtonBypass {
                                height: 50px;
                                width: 50px;
                                parameter: bypass;
                                icon: @image-url("resource/img/LogicColour.png");
                                start-change => {
                                    start-change(bypass);
                                }
                                changed(value) => {
                                    changed(bypass, value);
                                }
                                end-change => {
                                    end-change(bypass);
                                }
                                set-string(string) => {
                                    set-string(bypass, string);
                                }
                            }

                            Text {
                                text: "CoPiReMap";
                                font-size: 55px;
                                color: white;
                                font-family: "Fingercute";
                            }
                        }

                        HorizontalLayout {
                            spacing: 10px;
                            padding: 3px;
                            alignment: start;
                            ParameterKnob {
                                height: 35px;
                                parameter: dry-gain;
                                text: "Dry Gain";
                                // FIXME: Callbacks need to be mapped manually
                                start-change => {
                                    start-change(dry-gain);
                                }
                                changed(value) => {
                                    changed(dry-gain, value);
                                }
                                end-change => {
                                    end-change(dry-gain);
                                }
                                set-string(string) => {
                                    set-string(dry-gain, string);
                                }
                            }

                            ParameterKnob {
                                height: 35px;
                                parameter: wet-gain;
                                text: "Wet Gain";
                                blue: true;
                                // FIXME: Callbacks need to be mapped manually
                                start-change => {
                                    start-change(wet-gain);
                                }
                                changed(value) => {
                                    changed(wet-gain, value);
                                }
                                end-change => {
                                    end-change(wet-gain);
                                }
                                set-string(string) => {
                                    set-string(wet-gain, string);
                                }
                            }

                            ParameterKnob {
                                height: 35px;
                                parameter: lhf-gain;
                                text: "L/H F dB";
                                // FIXME: Callbacks need to be mapped manually
                                start-change => {
                                    start-change(lhf-gain);
                                }
                                changed(value) => {
                                    changed(lhf-gain, value);
                                }
                                end-change => {
                                    end-change(lhf-gain);
                                }
                                set-string(string) => {
                                    set-string(lhf-gain, string);
                                }
                            }
                        }
                    }
                }

                Rectangle {
                    height: 405px;
                    border-radius: 5px;
                    background: #00000061;
                    border-color: #ffffffb5;
                    border-width: 3px;
                    HorizontalLayout {
                        padding: 20px;
                        spacing: 25px;
                        Rectangle {
                            HorizontalLayout {
                                padding-left: 10px;
                                spacing: 3px;
                                z: 1;
                                ParameterButtonPiano {
                                    height: 45px;
                                    width: 25px;
                                    parameter: note-c-sharp;
                                    start-change => {
                                        start-change(note-c-sharp);
                                    }
                                    changed(value) => {
                                        changed(note-c-sharp, value);
                                    }
                                    end-change => {
                                        end-change(note-c-sharp);
                                    }
                                    set-string(string) => {
                                        set-string(note-c-sharp, string);
                                    }
                                }

                                ParameterButtonPiano {
                                    height: 45px;
                                    width: 25px;
                                    parameter: note-d-sharp;
                                    start-change => {
                                        start-change(note-d-sharp);
                                    }
                                    changed(value) => {
                                        changed(note-d-sharp, value);
                                    }
                                    end-change => {
                                        end-change(note-d-sharp);
                                    }
                                    set-string(string) => {
                                        set-string(note-d-sharp, string);
                                    }
                                }

                                Rectangle {
                                    height: 45px;
                                    width: 15px;
                                }

                                ParameterButtonPiano {
                                    height: 45px;
                                    width: 25px;
                                    parameter: note-f-sharp;
                                    start-change => {
                                        start-change(note-f-sharp);
                                    }
                                    changed(value) => {
                                        changed(note-f-sharp, value);
                                    }
                                    end-change => {
                                        end-change(note-f-sharp);
                                    }
                                    set-string(string) => {
                                        set-string(note-f-sharp, string);
                                    }
                                }

                                ParameterButtonPiano {
                                    height: 45px;
                                    width: 25px;
                                    parameter: note-g-sharp;
                                    start-change => {
                                        start-change(note-g-sharp);
                                    }
                                    changed(value) => {
                                        changed(note-g-sharp, value);
                                    }
                                    end-change => {
                                        end-change(note-g-sharp);
                                    }
                                    set-string(string) => {
                                        set-string(note-g-sharp, string);
                                    }
                                }

                                ParameterButtonPiano {
                                    height: 45px;
                                    width: 25px;
                                    parameter: note-a-sharp;
                                    start-change => {
                                        start-change(note-a-sharp);
                                    }
                                    changed(value) => {
                                        changed(note-a-sharp, value);
                                    }
                                    end-change => {
                                        end-change(note-a-sharp);
                                    }
                                    set-string(string) => {
                                        set-string(note-a-sharp, string);
                                    }
                                }
                            }

                            HorizontalLayout {
                                ParameterButtonPiano {
                                    height: 75px;
                                    width: 25px;
                                    parameter: note-c;
                                    start-change => {
                                        start-change(note-c);
                                    }
                                    changed(value) => {
                                        changed(note-c, value);
                                    }
                                    end-change => {
                                        end-change(note-c);
                                    }
                                    set-string(string) => {
                                        set-string(note-c, string);
                                    }
                                }

                                ParameterButtonPiano {
                                    height: 75px;
                                    width: 25px;
                                    parameter: note-d;
                                    start-change => {
                                        start-change(note-d);
                                    }
                                    changed(value) => {
                                        changed(note-d, value);
                                    }
                                    end-change => {
                                        end-change(note-d);
                                    }
                                    set-string(string) => {
                                        set-string(note-d, string);
                                    }
                                }

                                ParameterButtonPiano {
                                    height: 75px;
                                    width: 25px;
                                    parameter: note-e;
                                    start-change => {
                                        start-change(note-e);
                                    }
                                    changed(value) => {
                                        changed(note-e, value);
                                    }
                                    end-change => {
                                        end-change(note-e);
                                    }
                                    set-string(string) => {
                                        set-string(note-e, string);
                                    }
                                }

                                ParameterButtonPiano {
                                    height: 75px;
                                    width: 25px;
                                    parameter: note-f;
                                    start-change => {
                                        start-change(note-f);
                                    }
                                    changed(value) => {
                                        changed(note-f, value);
                                    }
                                    end-change => {
                                        end-change(note-f);
                                    }
                                    set-string(string) => {
                                        set-string(note-f, string);
                                    }
                                }

                                ParameterButtonPiano {
                                    height: 75px;
                                    width: 25px;
                                    parameter: note-g;
                                    start-change => {
                                        start-change(note-g);
                                    }
                                    changed(value) => {
                                        changed(note-g, value);
                                    }
                                    end-change => {
                                        end-change(note-g);
                                    }
                                    set-string(string) => {
                                        set-string(note-g, string);
                                    }
                                }

                                ParameterButtonPiano {
                                    height: 75px;
                                    width: 25px;
                                    parameter: note-a;
                                    start-change => {
                                        start-change(note-a);
                                    }
                                    changed(value) => {
                                        changed(note-a, value);
                                    }
                                    end-change => {
                                        end-change(note-a);
                                    }
                                    set-string(string) => {
                                        set-string(note-a, string);
                                    }
                                }

                                ParameterButtonPiano {
                                    height: 75px;
                                    width: 25px;
                                    parameter: note-b;
                                    start-change => {
                                        start-change(note-b);
                                    }
                                    changed(value) => {
                                        changed(note-b, value);
                                    }
                                    end-change => {
                                        end-change(note-b);
                                    }
                                    set-string(string) => {
                                        set-string(note-b, string);
                                    }
                                }
                            }
                        }

                        // ParameterKnob {
                        //     height: 50px;
                        //     parameter: gain;
                        //     text: "Gain";
                        //     // FIXME: Callbacks need to be mapped manually
                        //     start-change => { start-change(gain); }
                        //     changed(value) => { changed(gain, value); }
                        //     end-change => { end-change(gain); }
                        //     set-string(string) => { set-string(gain, string); }
                        // }

                        // ParameterKnob {
                        //     height: 10px;
                        //     parameter: gain;
        
                        //     // FIXME: Callbacks need to be mapped manually
                        //     start-change => { start-change(gain); }
                        //     changed(value) => { changed(gain, value); }
                        //     end-change => { end-change(gain); }
                        //     set-string(string) => { set-string(gain, string); }
                        // }

                        // ParameterSlider {
                        //     height: 10px;
                        //     width: 100px;
                        //     parameter: gain;
            
                        //     // FIXME: Callbacks need to be mapped manually
                        //     start-change => { start-change(gain); }
                        //     changed(value) => { changed(gain, value); }
                        //     end-change => { end-change(gain); }
                        //     set-string(string) => { set-string(gain, string); }
                        // }
                        
                    }
                }
            }

            HorizontalLayout {
                alignment: end;
                VerticalLayout {
                    alignment: end;
                    Rectangle {
                        width: 20px;
                        height: 20px;
                        handle := Image {
                            colorize: touch.has-hover && touch.pressed ? #aaaaaa : touch.has-hover ? #e0dfdf : #ffffff;
                            source: @image-url("resource/img/resize-right.svg");
                        }

                        touch := TouchArea {
                            property <float> pressed-value;
                            pointer-event(event) => {
                                if (event.button == PointerEventButton.left) {
                                    if (event.kind == PointerEventKind.down) {
                                        self.pressed-value = root.scale_gui.value;
                                        root.start-change(root.scale_gui);
                                        root.gui_changing = true;
                                    } else if (event.kind == PointerEventKind.up || event.kind == PointerEventKind.cancel) {
                                        root.end-change(root.scale_gui);
                                        root.gui_changing = false;
                                    }
                                }
                                if (root.gui_changing && event.kind == PointerEventKind.cancel) {
                                    root.end-change(root.scale_gui);
                                    root.gui_changing = false;
                                }
                            }
                            moved => {
                                if (self.enabled && self.pressed) {
                                    root.changed(scale_gui, clamp(self.pressed-value + (((touch.mouse-y - touch.pressed-y) + (touch.mouse-x - touch.pressed-x)) / 2) / (root.width - handle.width), 0.0, 1.0));
                                }
                            }
                        }
                    }
                }
            }

            VerticalLayout {
                alignment: end;
                padding-bottom: 3px;
                padding-left: 10px;
                padding-right: 20px;
                spacing: 0px;
                HorizontalLayout {
                    alignment: space-between;
                    Text {
                        text: "LogicCuteGuy";
                        font-size: 15px;
                        color: white;
                        font-family: "Fingercute";
                    }

                    Text {
                        text: "Latency: " + root.latency + "smp";
                        font-size: 15px;
                        color: white;
                        font-family: "Fingercute";
                    }
                }
            }
        }
    }
}
